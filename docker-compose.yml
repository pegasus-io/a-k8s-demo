version: '3.2'

services:
#
# ----------- HELM OPS to operate the AWS IAAS and the Kubernetes Cluster inside of the AWS tenant
  kubeone_operator:
    # image: jblass3ll3.world/a-k8s-demo/kubeone_operator:0.0.1
    # From docker.io
    image: pegasusio/creshtest_kubeone_operator:0.0.1
    environment:
      - SSH_URI_TO_HELM_CHART=$SSH_URI_TO_HELM_CHART

#
# ----------- HELM OPS to deploy the NodeJS Express TypeScript App
  helm_operator_deployer:
    # image: jblass3ll3.world/a-k8s-demo/helm_operator:0.0.1
    # From docker.io
    image: pegasusio/creshtest_helm_operator:0.0.1
    environment:
      - SSH_URI_TO_HELM_CHART=$SSH_URI_TO_HELM_CHART


#
# ----------- ANSIBLE OPS
  # -------->>
  # -------->> Playbook ansible permettant de provisionner le cluster K8S sur AWS
  ansible_k8s_provisioner:
    hostname: 'ansible_k8s_provisioner.a-k8s-demo.io'
    container_name: "ansible_k8s_provisioner"
    # image: image: jblass3ll3.world/a-k8s-demo/ansible_operator:0.0.1
    image: pegasusio/creshtest_ansible_operator:0.0.1
    environment:
      - PIPELINE_GIT_SERVICE_PROVIDER_HOSTNAME=$PIPELINE_GIT_SERVICE_PROVIDER_HOSTNAME
      - BUMBLEBEE_HOME_INSIDE_CONTAINER=$BUMBLEBEE_HOME_INSIDE_CONTAINER
      - BUMBLEBEE_SSH_PRIVATE_KEY_FILENAME=$BUMBLEBEE_SSH_PRIVATE_KEY_FILENAME
      - BUMBLEBEE_GIT_SSH_COMMAND=$BUMBLEBEE_GIT_SSH_COMMAND
      # that's the ansible playbook who knows how to deploymyhugo resume to this pipeline's local deployment target.
      - SSH_URI_TO_ANSIBLE_PLAYBOOK=$SSH_URI_TO_ANSIBLE_PLAYBOOK
    volumes:
      - $BUMBLEBEE_SECRET_VAULT_OUTSIDE_CONTAINER:$BUMBLEBEE_HOME_INSIDE_CONTAINER/.secrets:rw
    # ---------------------------------------------
    # [docker [run|exec] -it ...]
    # stdinURI_DWNLD_STARTER_EXAMPLE_CONFIG
    stdin_open:       true
    # stdout
    tty:              true
    # ---------------------------------------------
    # restart: always
    restart: 'no'
        # ---------------------------------------------
    # restart: always
    restart: 'no'
    extra_hosts:
     - "${LOCAL_DEPLOYMENT_TARGET_HOSTNAME}:${NET_INTERFACE_SSH_DEPLOYMENT_TARGET}"

#
# ----------- AWS CLI OPS
  awscli-op1:
    # image: jblass3ll3.world/a-k8s-demo/aws-cli-v2:0.0.1
    image: pegasusio/creshtest_aws-cli-v2:0.0.1
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
    command: sh -c "aws autoscaling describe-auto-scaling-groups | jq -r '.AutoScalingGroups[] | select(.AutoScalingGroupName | startswith(\"${STACK_NAME}-NodeAsg\")).AutoScalingGroupName'"
    volumes:
      - aws-cli/operator1:/aws/playground:rw

  awscli-op2:
    # image: jblass3ll3.world/a-k8s-demo/aws-cli-v2:0.0.1
    image: pegasusio/creshtest_aws-cli-v2:0.0.1
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
    command: sh -c "aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names $ASG_NAME | jq '.AutoScalingGroups[0].DesiredCapacity'"
    volumes:
      - aws-cli/operator2:/aws/playground:rw

  awscli-op3:
    # image: jblass3ll3.world/a-k8s-demo/aws-cli-v2:0.0.1
    image: pegasusio/creshtest_aws-cli-v2:0.0.1
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
    command: sh -c "aws autoscaling update-auto-scaling-group --auto-scaling-group-name $ASG_NAME --desired-capacity $ASG_DESIRED_CAPACITY"
    volumes:
      - aws-cli/operator3:/aws/playground:rw
